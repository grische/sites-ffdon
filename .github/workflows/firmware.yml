---
name: Build ffdon firmware

on:
  workflow_dispatch:
  push:
    tags:
      - v*
  pull_request:
    paths-ignore:
      - "**.md"
      - "**/CODEOWNERS"
      - ".github/ISSUE_TEMPLATE"
      - ".github/*.yml"
      - "contrib/sign.sh"

env:
  gluon_ref: "v2018.2.4"

jobs:
  build_firmware:
    strategy:
      fail-fast: false
      matrix:
        target: [ "ar71xx-generic", "ar71xx-nand", "ar71xx-tiny", "brcm2708-bcm2708", "brcm2708-bcm2709", "mpc85xx-generic", "ramips-mt7621", "x86-64", "x86-generic", "x86-geode" ]
        domain: [ "01", "19" ]

    runs-on: ubuntu-20.04
    steps:
      - name: Maximize build space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Install build dependencies
        run: |
          sudo -E ./scripts/install_build_dependencies.sh

      - name: build target ${{ matrix.target }}
        id: compile
        run: |
          # Build images
          ./scripts/build.sh ${{ matrix.target }} ${{ matrix.domain }} ${{ env.gluon_ref }}

      - name: print output files
        run: |
          ls -AlR output/ || true

      - name: Upload firmware ${{ matrix.target }}
        uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.target }}_domaene${{ matrix.domain }}_output
          path: ./output/domaene${{ matrix.domain }}/

  create_release:
    runs-on: ubuntu-latest
    needs:
      - build_firmware
    # Only build for tags starting with a "v"
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Maximize build space
        run: |
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
      - name: Download all artifacts
        uses: actions/download-artifact@v3
      - name: Display structure of artifacts
        run: ls -R
      - name: Create tar.gz files
        run: |
          set -x
          for output in *_output; do
            tar zcvf "${output}.tar.gz" "${output}"
            ls -al "${output}.tar.gz" || true
            du -sm "${output}" || true
            rm -r "${output}" # Clean up artifacts to save space
          done
      - name: Create Release & Upload Release Assets
        uses: softprops/action-gh-release@v1
        with:
          # Note: If there is no release name specified, releases created in
          # the GitHub UI do not trigger a failure and are modified instead.
          draft: false
          prerelease: false
          # Note: Release notes are only auto-generated if the release was
          # created by the Github Action and was not created in the Github UI.
          generate_release_notes: true
          files: |
            ./*_output.tar.gz
